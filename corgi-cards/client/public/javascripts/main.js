// Generated by CoffeeScript 1.6.2
var AppViewModel, Board, app, guid, s4,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

window.Player = (function() {
  function Player(delegate) {
    var _ref,
      _this = this;

    this.delegate = delegate;
    this.join = __bind(this.join, this);
    this.login = __bind(this.login, this);
    this.playCard = __bind(this.playCard, this);
    _ref = this.delegate, this.board = _ref.board, this.socket = _ref.socket;
    this.username = ko.observable(null);
    this.room = ko.observable(null);
    this.hand = ko.observableArray([]);
    this.deck = ko.observableArray([]);
    this.discard = ko.observableArray([]);
    this.socket.on("CardToHand", function(data) {
      return _this.hand.push(new Card(_this, data));
    });
  }

  Player.prototype.playCard = function(card, ui) {
    return this.socket.emit('CardToHand', {
      id: guid(),
      name: "fuck ya",
      x: Math.random() * 200 + 900,
      y: Math.random() * 600
    });
  };

  Player.prototype.login = function(player, ev) {
    if (ev.keyCode === 13) {
      this.socket.emit('auth', this.username());
    }
    return true;
  };

  Player.prototype.join = function(player, ev) {
    if (ev.keyCode === 13) {
      this.board.clear();
      this.socket.emit('join_room', this.room());
    }
    return true;
  };

  return Player;

})();

window.Card = (function() {
  function Card(delegate, data) {
    this.delegate = delegate;
    this.dragstop = __bind(this.dragstop, this);
    this.socket = this.delegate.socket;
    this.id = data.id;
    this.name = data.name;
    this.img = data.img;
    this.position = ko.observable([data.position.x, data.position.y]);
  }

  Card.prototype.dragstop = function(ev, ui) {
    this.position()[0] = ui.position.left;
    this.position()[1] = ui.position.top;
    return this.socket.emit('CardMoved', {
      id: this.id,
      name: this.name,
      x: ui.position.left,
      y: ui.position.top
    });
  };

  return Card;

})();

ko.bindingHandlers.draggable = {
  init: function(element, valueAccessor) {
    var options;

    options = ko.utils.unwrapObservable(valueAccessor());
    element = $(element);
    $(element).draggable();
    return $(element).on('drag', options.dragstop);
  }
};

ko.bindingHandlers.droppable = {
  init: function(element, valueAccessor) {
    var options;

    options = ko.utils.unwrapObservable(valueAccessor());
    element = $(element);
    return $(element).droppable(options);
  }
};

s4 = function() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
};

guid = function() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
};

Board = (function() {
  function Board(delegate) {
    var _this = this;

    this.delegate = delegate;
    this.dropCard = __bind(this.dropCard, this);
    this.clear = __bind(this.clear, this);
    this.socket = this.delegate.socket;
    this.cards = ko.observableArray([]);
    this.socket.on('CardMoved', function(data) {
      var $cardvm, card;

      card = _.find(_this.cards(), function(card) {
        return card.id === data.id;
      });
      if (!card) {
        return;
      }
      $cardvm = $("#" + card.id);
      $cardvm.css("top", data.y + 'px');
      return $cardvm.css("left", data.x + 'px');
    });
    this.socket.on('CardPlayed', function(data) {
      var $cardvm;

      _this.cards.push(new Card(_this, {
        id: data.id,
        name: data.name,
        position: {
          x: data.x,
          y: data.y
        }
      }));
      $cardvm = $("#" + data.id);
      $cardvm.css("top", data.y + 'px');
      return $cardvm.css("left", data.x + 'px');
    });
    this.socket.on("sync_active", function(data) {
      console.log(data);
      return _.each(data, function(card) {
        var $cardvm;

        _this.cards.push(new Card(_this, {
          id: card.id,
          name: card.name,
          position: {
            x: card.x,
            y: card.y
          }
        }));
        $cardvm = $("#" + card.id);
        $cardvm.css("top", card.y + 'px');
        return $cardvm.css("left", card.x + 'px');
      });
    });
  }

  Board.prototype.clear = function() {
    return this.cards.splice(0);
  };

  Board.prototype.dropCard = function(data, ui) {
    var card;

    card = ko.dataFor(ui.helper.get(0));
    console.log(card.position());
    return this.socket.emit('CardPlayed', {});
  };

  return Board;

})();

AppViewModel = (function() {
  function AppViewModel() {
    this.socket = io.connect(window.location.origin);
    this.host = window.location.origin;
    this.board = new Board(this);
    this.player = new Player(this);
  }

  return AppViewModel;

})();

app = new AppViewModel;

$(function() {
  return ko.applyBindings(app, $("html").get(0));
});
