// Generated by CoffeeScript 1.6.2
var Action, AppViewModel, Board, app, guid, s4,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

window.Player = (function() {
  function Player(delegate) {
    var _ref,
      _this = this;

    this.delegate = delegate;
    this.isMine = __bind(this.isMine, this);
    this.dragstop = __bind(this.dragstop, this);
    this.addIntel = __bind(this.addIntel, this);
    this.addStrength = __bind(this.addStrength, this);
    _ref = this.delegate, this.actions = _ref.actions, this.board = _ref.board, this.socket = _ref.socket, this.player1 = _ref.player1;
    this.life = ko.observable(30);
    this.diff = ko.observable(false);
    this.hand = ko.observableArray([]);
    this.deck = ko.observableArray([]);
    this.discard = ko.observableArray([]);
    this.opponentHand = ko.observableArray([]);
    this.strength = ko.observable(0);
    this.strengthLeft = ko.observable(0);
    this.strengthCount = ko.computed(function() {
      return _this.strengthLeft() + '/' + _this.strength();
    });
    this.intel = ko.observable(0);
    this.intelLeft = ko.observable(0);
    this.intelCount = ko.computed(function() {
      return _this.intelLeft() + '/' + _this.intel();
    });
    this.haveUsedResource = ko.observable(true);
    this.myTurn = ko.observable(false);
    this.socket.on("CardDraw", function(data) {
      var $cardvm, card;

      card = _.find(_this.actions(), function(action) {
        return action.target === data.id && action.message === 'You drew a card';
      });
      if (card) {
        return;
      }
      _this.actions.push({
        message: "You drew a card",
        target: data.id
      });
      data.x = Math.random() * 500 + (_this.player1() ? 0 : 600);
      data.y = 900;
      card = new Card(_this, data);
      _this.hand.push(card);
      $cardvm = $("#" + card.id);
      $cardvm.css("top", data.y + 'px');
      $cardvm.css("left", data.x + 'px');
      return _this.socket.emit("HandMoved", {
        id: card.id,
        x: data.x,
        y: data.y
      });
    });
    this.socket.on("CardPlayed", function(data) {
      var card;

      if ((card = _.find(_this.hand(), function(card) {
        return card.id === data.id;
      }))) {
        _this.hand(_.without(_this.hand(), card));
      }
      if ((card = _.find(_this.opponentHand(), function(card) {
        return card.id === data.id;
      }))) {
        return _this.opponentHand(_.without(_this.opponentHand(), card));
      }
    });
    this.socket.on("SyncHand", function(data) {
      return _.each(data, function(card) {
        var $cardvm;

        _this.hand.push(new Card(_this, card));
        $cardvm = $("#" + card.id);
        $cardvm.css("top", card.y + 'px');
        return $cardvm.css("left", card.x + 'px');
      });
    });
    this.socket.on("OpponentDraw", function(data) {
      var card;

      card = _.find(_this.actions(), function(action) {
        return action.target === data && action.message === 'Your opponent drew a card';
      });
      if (card) {
        return;
      }
      _this.actions.push({
        message: "Your opponent drew a card",
        target: data
      });
      return _this.opponentHand.push({
        id: data,
        x: -100,
        y: -100
      });
    });
    this.socket.on("HandMoved", function(data) {
      var $cardvm, card;

      card = _.find(_this.opponentHand(), function(card) {
        return card.id === data.id;
      });
      if (card != null) {
        card.x = data.x;
      }
      if (card != null) {
        card.y = data.y;
      }
      $cardvm = $("#" + data.id);
      $cardvm.css("top", data.y + 'px');
      return $cardvm.css("left", data.x + 'px');
    });
    this.socket.on("SyncOpponentHand", function(data) {
      return _.each(data, function(card) {
        var $cardvm;

        _this.opponentHand.push(card);
        $cardvm = $("#" + card.id);
        $cardvm.css("top", card.y + 'px');
        return $cardvm.css("left", card.x + 'px');
      });
    });
  }

  Player.prototype.addStrength = function() {
    if (this.haveUsedResource()) {
      return;
    }
    this.strength(this.strength() + 1);
    this.strengthLeft(this.strengthLeft() + 1);
    this.haveUsedResource(true);
    this.socket.emit("AddStrength");
    return false;
  };

  Player.prototype.addIntel = function() {
    if (this.haveUsedResource()) {
      return;
    }
    this.intel(this.intel() + 1);
    this.intelLeft(this.intelLeft() + 1);
    this.haveUsedResource(true);
    this.socket.emit("AddIntel");
    return false;
  };

  Player.prototype.dragstop = function(card, ui) {
    card = ko.dataFor(ui.helper.get(0));
    if (!card) {
      return;
    }
    card.x(ui.position.left);
    card.y(ui.position.top);
    return this.socket.emit("HandMoved", {
      id: card.id,
      x: ui.position.left,
      y: ui.position.top
    });
  };

  Player.prototype.isMine = function() {
    return true;
  };

  return Player;

})();

window.Card = (function() {
  function Card(delegate, data) {
    this.delegate = delegate;
    this.isMine = __bind(this.isMine, this);
    this.socket = this.delegate.socket;
    this.id = data.id;
    this.name = data.name;
    this.type = ko.observable(data.type);
    this.uname = data.uname;
    this.img = data.img;
    this.x = ko.observable(data.x);
    this.y = ko.observable(data.y);
    this.stats = new Stats(data.stats);
    this.takingDamage = ko.observable(false);
    this.tapped = ko.observable(false);
  }

  Card.prototype.isMine = function(card, ui) {
    return app.username() === this.uname;
  };

  return Card;

})();

window.Stats = (function() {
  function Stats(stats) {
    this.attack = ko.observable(stats.attack != null ? stats.attack : "");
    this.health = ko.observable(stats.health != null ? stats.health : "");
    this.baseHealth = ko.observable(stats.health != null ? stats.health : "");
    this.cost = ko.observable(stats.cost != null ? stats.cost : "1m");
  }

  return Stats;

})();

window.Ability = (function() {
  function Ability(type, value) {
    this.type = type;
    this.value = value;
  }

  return Ability;

})();

ko.bindingHandlers.draggable = {
  init: function(element, valueAccessor) {
    var options;

    options = ko.utils.unwrapObservable(valueAccessor());
    element = $(element);
    if (options.enabled()) {
      $(element).draggable();
      return $(element).on('drag', options.dragstop);
    }
  }
};

ko.bindingHandlers.droppable = {
  init: function(element, valueAccessor) {
    var options;

    options = ko.utils.unwrapObservable(valueAccessor());
    element = $(element);
    return $(element).droppable(options);
  }
};

s4 = function() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
};

guid = function() {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
};

Board = (function() {
  function Board(delegate) {
    var _ref,
      _this = this;

    this.delegate = delegate;
    this.handleOpponentClick = __bind(this.handleOpponentClick, this);
    this.handleSelfClick = __bind(this.handleSelfClick, this);
    this.handleBoardClick = __bind(this.handleBoardClick, this);
    this.handleCardClick = __bind(this.handleCardClick, this);
    this.dragstop = __bind(this.dragstop, this);
    this.dropCard = __bind(this.dropCard, this);
    this.clear = __bind(this.clear, this);
    _ref = this.delegate, this.actions = _ref.actions, this.socket = _ref.socket, this.activeTurn = _ref.activeTurn;
    this.action = ko.observable(null);
    this.target = ko.observable(null);
    this.cards = ko.observableArray([]);
    this.socket.on('CardMoved', function(data) {
      var $cardvm, card;

      card = _.find(_this.cards(), function(card) {
        return card.id === data.id;
      });
      if (!card) {
        return;
      }
      $cardvm = $("#" + card.id);
      $cardvm.css("top", data.y + 'px');
      return $cardvm.css("left", data.x + 'px');
    });
    this.socket.on('CardPlayed', function(data) {
      var $cardvm;

      if (data.uname === app.username()) {
        _this.actions.push({
          message: "You played " + data.name
        });
      } else {
        _this.actions.push({
          message: "Your opponent played " + data.name
        });
      }
      _this.cards.push(new Card(_this, data));
      $cardvm = $("#" + data.id);
      $cardvm.css("top", (data.y - 210) + 'px');
      return $cardvm.css("left", (data.x - 515) + 'px');
    });
    this.socket.on("sync_active", function(data) {
      return _.each(data, function(card) {
        var $cardvm;

        _this.cards.push(new Card(_this, data));
        $cardvm = $("#" + card.id);
        $cardvm.css("top", (card.y - 210) + 'px');
        return $cardvm.css("left", (card.x - 515) + 'px');
      });
    });
    this.socket.on("SpellCast", function(cardId) {
      var card;

      if ((card = _.find(_this.cards(), function(card) {
        return card.id === cardId;
      }))) {
        _this.cards(_.without(_this.cards(), card));
      }
      _this.target(null);
      return _this.action(null);
    });
    this.socket.on("CardInteraction", function(data) {
      var action, combat, target;

      if (data.type === 'attack') {
        combat = data.result;
        action = _.find(_this.cards(), function(card) {
          var _ref1;

          return card.id === ((_ref1 = combat.action) != null ? _ref1.id : void 0);
        });
        target = _.find(_this.cards(), function(card) {
          return card.id === combat.target.id;
        });
        if (action != null) {
          if (combat.action.life <= 0) {
            _this.cards(_.without(_this.cards(), action));
            _this.actions.push(new Action({
              message: "" + action.name + " is in a better place"
            }));
          } else {
            action.stats.health(combat.action.life);
            _this.actions.push(new Action({
              message: "" + action.name + " has taken " + combat.action.damage + " damage"
            }));
          }
        }
        if (target != null) {
          if (combat.target.life <= 0) {
            _this.cards(_.without(_this.cards(), target));
            _this.actions.push(new Action({
              message: "" + target.name + " is in a better place"
            }));
          } else {
            target.stats.health(combat.target.life);
            target.takingDamage(null);
            target.takingDamage((combat.target.damage < 0 ? "+" + combat.target.damage * -1 : "-" + combat.target.damage));
            _this.actions.push(new Action({
              message: "" + target.name + " has taken " + combat.target.damage + " damage"
            }));
          }
        }
      }
      _this.action(null);
      return _this.target(null);
    });
  }

  Board.prototype.clear = function() {
    return this.cards.splice(0);
  };

  Board.prototype.dropCard = function(data, ui) {
    var card;

    if (!this.activeTurn()) {
      return;
    }
    card = ko.dataFor(ui.helper.get(0));
    return this.socket.emit('CardPlayed', card.id);
  };

  Board.prototype.dragstop = function(ev, ui) {
    var card;

    card = ko.dataFor(ui.helper.get(0));
    card.x(ui.position.left);
    card.y(ui.position.top);
    return this.socket.emit('CardMoved', {
      id: card.id,
      name: card.name,
      x: ui.position.left,
      y: ui.position.top
    });
  };

  Board.prototype.handleCardClick = function(card, ui) {
    var action, target;

    if (card.isMine(card)) {
      if (this.action() === card) {
        this.action(null);
      } else {
        this.action(card);
      }
    } else {
      if (this.target() === card) {
        this.target(null);
      } else {
        this.target(card);
      }
    }
    if (this.action() && this.target()) {
      action = _.isString(this.action()) ? this.action() : this.action().id;
      target = _.isString(this.target()) ? this.target() : this.target().id;
      this.socket.emit("CardInteraction", action, target);
    }
    return false;
  };

  Board.prototype.handleBoardClick = function(board, ui) {
    console.log("here");
    this.action(null);
    return this.target(null);
  };

  Board.prototype.handleSelfClick = function() {
    var action, target;

    if (this.target() !== "self") {
      this.target("self");
    } else {
      this.target(null);
    }
    if (this.action() && this.target()) {
      action = _.isString(this.action()) ? this.action() : this.action().id;
      target = _.isString(this.target()) ? this.target() : this.target().id;
      return this.socket.emit("CardInteraction", action, target);
    }
  };

  Board.prototype.handleOpponentClick = function() {
    var action, target;

    if (this.target() !== "opponent") {
      this.target("opponent");
    } else {
      this.target(null);
    }
    if (this.action() && this.target()) {
      action = _.isString(this.action()) ? this.action() : this.action().id;
      target = _.isString(this.target()) ? this.target() : this.target().id;
      return this.socket.emit("CardInteraction", action, target);
    }
  };

  return Board;

})();

Action = (function() {
  function Action(data) {
    var currentdate, datetime;

    currentdate = new Date();
    datetime = currentdate.getDate() + "/" + (currentdate.getMonth() + 1) + "/" + currentdate.getFullYear() + " @ " + currentdate.getHours() + ":" + currentdate.getMinutes() + ":" + currentdate.getSeconds();
    this.time = ko.observable(datetime);
    this.target = ko.observable(null);
    this.message = ko.observable(data.message || "---");
  }

  return Action;

})();

AppViewModel = (function() {
  function AppViewModel() {
    this.join = __bind(this.join, this);
    this.login = __bind(this.login, this);
    this.restart = __bind(this.restart, this);
    this.endTurn = __bind(this.endTurn, this);
    var _this = this;

    this.oppName = ko.observable("Opponent");
    this.username = ko.observable(null);
    this.room = ko.observable(null);
    this.player1 = ko.observable(false);
    this.activeTurn = ko.observable(false);
    this.socket = io.connect(window.location.origin);
    this.host = window.location.origin;
    this.actions = ko.observableArray([]);
    this.board = new Board(this);
    this.activeTurn.subscribe(function(val) {
      if (val) {
        return _.each(_this.board.cards(), function(card) {
          if (card.uname === _this.username()) {
            return $("#" + card.id).draggable("enable");
          }
        });
      } else {
        return _.each(_this.board.cards(), function(card) {
          if (card.uname === _this.username()) {
            return $("#" + card.id).draggable("option", "disabled", true);
          }
        });
      }
    });
    this.self = new Player(this, "self");
    this.opponent = new Player(this, "opponent");
    this.socket.on("FirstPlayer", function(names) {
      _this.player1(names.first === _this.username());
      if (names.p1 !== _this.username()) {
        return _this.oppName(names.p1);
      } else {
        return _this.oppName(names.p2);
      }
    });
    this.socket.on("PlayerLife", function(data) {
      var opponentDiff, opponentLife, selfDiff, selfLife;

      selfLife = data.self;
      opponentLife = data.opponent;
      selfDiff = selfLife - _this.self.life();
      opponentDiff = opponentLife - _this.opponent.life();
      _this.self.diff(null);
      _this.opponent.diff(null);
      _this.self.diff(selfDiff);
      _this.opponent.diff(opponentDiff);
      _this.self.life(selfLife);
      _this.opponent.life(opponentLife);
      if (selfDiff !== 0) {
        if (selfDiff > 0) {
          _this.actions.push({
            message: "You gained " + selfDiff + " life"
          });
          _this.actions.push({
            message: "You lost " + (selfDiff * -1) + " life"
          });
        }
      }
      if (opponentDiff !== 0) {
        if (opponentDiff > 0) {
          _this.actions.push({
            message: "Your opponent gained " + opponentDiff + " life"
          });
          return _this.actions.push({
            message: "Your opponent lost " + (opponentDiff * -1) + " life"
          });
        }
      }
    });
    this.socket.on("StartTurn", function(name) {
      _this.actions.push({
        message: "Starting turn: " + name
      });
      if (name !== _this.username()) {
        _this.activeTurn(false);
      } else {
        _this.activeTurn(true);
      }
      if (_this.activeTurn()) {
        _this.self.haveUsedResource(false);
        _this.self.strengthLeft(_this.self.strength());
        return _this.self.intelLeft(_this.self.intel());
      }
    });
    this.socket.on("AddStrength", function(data) {
      var me;

      me = data.uname === _this.username();
      if (me) {
        _this.self.strengthLeft(data.value);
        return _this.self.strength(data.cumulative);
      } else {
        _this.opponent.strengthLeft(data.value);
        return _this.opponent.strength(data.cumulative);
      }
    });
    this.socket.on("AddIntel", function(data) {
      var me;

      me = data.uname === _this.username();
      if (me) {
        _this.self.intelLeft(data.value);
        return _this.self.intel(data.cumulative);
      } else {
        _this.opponent.intelLeft(data.value);
        return _this.opponent.intel(data.cumulative);
      }
    });
  }

  AppViewModel.prototype.endTurn = function() {
    return this.socket.emit("EndTurn");
  };

  AppViewModel.prototype.restart = function() {
    this.board.clear();
    this.self.hand.splice(0);
    this.self.deck.splice(0);
    this.self.opponentHand.splice(0);
    return this.self.discard.splice(0);
  };

  AppViewModel.prototype.login = function(player, ev) {
    if (ev.keyCode === 13) {
      this.socket.emit('auth', app.username());
      this.actions.push({
        message: "You set your username to " + (app.username())
      });
    }
    return true;
  };

  AppViewModel.prototype.join = function(player, ev) {
    if (ev.keyCode === 13) {
      app.restart();
      this.socket.emit('join_room', this.room());
      this.actions.push({
        message: "You joined room " + (this.room())
      });
    }
    return true;
  };

  return AppViewModel;

})();

app = new AppViewModel;

$(function() {
  return ko.applyBindings(app, $("html").get(0));
});
